// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//Generator from PlanetScale:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

//Creating tables as per BED Assingment overview.

//User table:
//Connects to many Reviews and many Bookings
//Uodate profilePicture not pictureURL
model User {
  id              String   @id @default(uuid())
  username        String   @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture  String

  reviews         Review[]
  bookings        Booking[]
}

//Review table:
//Connects to one user and one property
//update activate cascade
model Review {
  id              String   @id @default(uuid())
  userId          String     
  propertyId      String     
  rating          Int
  comment         String

  userReview      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyReview  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([userId])
  @@index([propertyId])
}

//Booking table:
//Connects to one user and one property
//update activate cascade
model Booking {
  id              String   @id @default(uuid())
  userId          String
  propertyId      String     
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Decimal  @db.Decimal(10, 2)
  bookingStatus   String

  userBooking     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyBooking Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

//Property table:
//Conencts to many reviews, bookings and amenities
//Connects to one host
//update activate cascade
model Property {
  id              String   @id @default(uuid())
  hostId          String
  title           String
  description     String
  location        String
  pricePerNight   Decimal  @db.Decimal(10, 2)
  bedroomCount    Int
  bathRoomCount   Int
  maxGuestCount   Int
  rating          Int

  reviews         Review[]
  bookings        Booking[]
  amenities       Amenity[]
  hostProperty    Host    @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hostId])
}

//Host table:
//Connects to many properties
//Uodate profilePicture not pictureURL
model Host {
  id              String   @id @default(uuid())
  username        String   @unique
  password        String
  name            String
  email           String
  phoneNumber     String
  profilePicture  String
  aboutMe         String

  listings        Property[]
}

//Amanity tabkle:
//Connects to many properties
model Amenity {
  id              String   @id @default(uuid())
  name            String
  properties      Property[]
}
